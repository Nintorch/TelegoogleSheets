import telebot
from bot import bot, get_event_data, check_cancel, acquire_table

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã (—Å–º. commands/__init__.py)
from commands import *

"""
–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather
–≤ Telegram –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª token.txt

–î–∞–ª–µ–µ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Google. –°–ª–µ–¥—É–π—Ç–µ —É—Ä–æ–∫—É –Ω–∞ —Å–∞–π—Ç–µ
https://habr.com/ru/articles/483302/
–ß–∏—Ç–∞–π—Ç–µ –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö Google –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫" –¥–æ "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫."
–°–∫–∞—á–∞–Ω–Ω—ã–π .json —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º –¥–æ–±–∞–≤—å—Ç–µ –≤ –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –µ–≥–æ –≤ "service_account.json"

–î–∞–ª–µ–µ —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.
–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ BotFather:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /setcommands
2. –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –±–æ—Ç–∞
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:
start - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
cancel - –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
create - –°–æ–∑–¥–∞—Ç—å Google —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
addnote - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ Google —Ç–∞–±–ª–∏—Ü—É
findnote - –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
deleteall - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ

"""


class BotCommand:
    commands_list: list = None

    def __init__(self, command_text: str, command_readable: str, description: str, start_message: str,
                 next_step_handler):
        self._command_text = command_text
        self._description = description

        self.command_readable = command_readable
        self.start_message = start_message
        self.next_step_handler = next_step_handler

    def get_command_text(self):
        return "/" + self._command_text

    def get_description(self):
        return self._description.replace("<cmd>", "/" + self._command_text)

    def get_telebot_button(self):
        return telebot.types.KeyboardButton(self.command_readable)

    @staticmethod
    def init_commands():
        if BotCommand.commands_list is not None:
            return

        BotCommand.commands_list = [
            # <cmd> –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /create)
            BotCommand("create", "üí° –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–º–µ—Ç–∫–∞–º–∏, –≤–≤–µ–¥–∏—Ç–µ <cmd>",
                       start_message="–ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.",
                       next_step_handler=create_table_start),

            BotTableCommand("addnote", "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –≤–≤–µ–¥–∏—Ç–µ <cmd>",
                            start_message=add_note_command_text,
                            next_step_handler=add_note_start),

            BotTableCommand("findnote", "üîç –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è",
                            "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è, –≤–≤–µ–¥–∏—Ç–µ <cmd>",
                            start_message="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–º–µ—Ç–∫–æ–π –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏.\n"
                                          "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–æ–∏—Å–∫ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞!",
                            next_step_handler=find_note_start),

            BotTableCommand("deleteall", "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏", "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏, –≤–≤–µ–¥–∏—Ç–µ <cmd>",
                            start_message="", next_step_handler=delete_all_start, run_immediately=True),

            BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∞", "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ <cmd>",
                       # –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_text_messages(), —Ç.–µ. —Ç–æ–≥–¥–∞,
                       # –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞
                       start_message="–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É.", next_step_handler=None),
        ]

    @staticmethod
    def get_command(text: str):
        for cmd in BotCommand.commands_list:
            if cmd.get_command_text() == text or cmd.command_readable == text:
                return cmd
        return None

    @staticmethod
    def has_command(text: str):
        return BotCommand.get_command(text) is not None


class BotTableCommand(BotCommand):
    def __init__(self, command_text: str, command_readable: str, description: str, start_message: str,
                 next_step_handler, run_immediately=False):
        super().__init__(command_text,
                         command_readable,
                         description,
                         "–í–≤–µ–¥–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –ª–∏–±–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.",
                         self.run_command)
        self._command_text = command_text
        self._description = description

        self.command_readable = command_readable
        self.table_start_message = start_message
        self.table_function = next_step_handler
        self.run_immediately = run_immediately

    def run_command(self, message):
        if check_cancel(message): return

        if acquire_table(message):
            if self.run_immediately:
                self.table_function(message)
            else:
                bot.send_message(message.from_user.id, self.table_start_message)
                bot.register_next_step_handler(message, self.table_function)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == "/start":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [cmd.get_telebot_button() for cmd in BotCommand.commands_list]
        markup.add(*buttons)

        message_entries = ["–ü—Ä–∏–≤–µ—Ç!"] + [cmd.get_description() for cmd in BotCommand.commands_list]

        bot.send_message(message.from_user.id, '\n'.join(message_entries), reply_markup=markup)

    elif BotCommand.has_command(message.text):
        command = BotCommand.get_command(message.text)
        bot.send_message(message.from_user.id, command.start_message)

        # –ë—É–¥–µ—Ç None –¥–ª—è /cancel, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        # –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (get_text_messages())
        if command.next_step_handler is not None:
            bot.register_next_step_handler(message, command.next_step_handler)

    else:
        bot.send_message(message.from_user.id, "–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


BotCommand.init_commands()
bot.polling(none_stop=True, interval=0)
